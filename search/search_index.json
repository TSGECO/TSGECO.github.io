{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TSG EcosystemTSG Ecosystem","text":"<p>A powerful framework for transcript segment graph analysis</p> Get Started GitHub <p>Welcome to the TSG (Transcript Segment Graph) ecosystem documentation. TSG is a new format designed for efficient representation and analysis of transcript data in graph format.</p> <p> The TSG Ecosystem </p>"},{"location":"#what-is-tsg","title":"What is TSG?","text":"<p>TSG (Transcript Segment Graph) is a specialized format that combines the benefits of transcript segment data structures with graph-based representations. This format enables powerful analysis, visualization, and processing of transcript data with complex relationships. The complete TSG format specification can be found in the TSG Specification.</p>"},{"location":"#core-components-of-the-tsg-ecosystem","title":"Core Components of the TSG Ecosystem","text":"TSG Core Library <p>Our foundational library that provides the basic data structures and algorithms for working with TSG data.</p> <ul> <li>Data conversion utilities</li> <li>Core graph operations</li> <li>Transcript segment processing</li> <li>Serialization capabilities</li> </ul> TSG Visualizer <p>An interactive visualization tool that renders TSG data in intuitive and informative ways.</p> <ul> <li>Transcript views</li> <li>Network graph visualizations</li> <li>Customizable rendering</li> <li>Real-time exploration</li> </ul> TSG Analytics Suite <p>Advanced analytical tools built specifically for TSG data.</p> <ul> <li>Pattern recognition algorithms</li> <li>Anomaly detection</li> <li>Predictive modeling</li> <li>Statistical analysis</li> </ul> TSG Converter <p>Utilities for converting between TSG and other common formats.</p> <ul> <li>CSV/TSV import/export</li> <li>Integration with transcript DBs</li> <li>Support for standard graph formats</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin working with the TSG ecosystem, check out our Quick Start Guide or explore the individual tool documentation linked below.</p> <p>New to TSG?</p> <p>If you're new to the TSG ecosystem, we recommend starting with the Installation Guide followed by the Quick Start Guide.</p>"},{"location":"#community-and-support","title":"Community and Support","text":"<p>Join our growing community of TSG users and contributors:</p> <ul> <li>GitHub Repository</li> <li>Community Forum</li> <li>Issue Tracker</li> </ul>"},{"location":"community/","title":"Community","text":"<p>Welcome to the TSGECO community! This page contains information on how to get involved, contribute to the project, and connect with other users.</p>"},{"location":"community/#get-involved","title":"Get Involved","text":"<p>There are many ways to participate in the TSG Ecosystem project:</p>"},{"location":"community/#join-the-discussion","title":"Join the Discussion","text":"<ul> <li>GitHub Discussions - Ask questions, share ideas, and connect with other users</li> <li>Community Forum - Longer discussions and community support</li> <li>Discord Server - Real-time chat and collaboration</li> </ul>"},{"location":"community/#stay-updated","title":"Stay Updated","text":"<ul> <li>Blog - Latest news and project updates</li> <li>Twitter - Quick updates and announcements</li> <li>Newsletter - Subscribe to our monthly newsletter</li> </ul>"},{"location":"community/#contributing","title":"Contributing","text":"<p>We welcome contributions of all kinds! Here's how you can help:</p>"},{"location":"community/#code-contributions","title":"Code Contributions","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature-name</code></li> <li>Make your changes and commit</li> <li>Submit a pull request</li> <li>Wait for review and feedback</li> </ol> <p>For more details, see our contribution guidelines.</p>"},{"location":"community/#documentation","title":"Documentation","text":"<p>Help improve our documentation:</p> <ul> <li>Fix typos or clarify existing documentation</li> <li>Add examples and tutorials</li> <li>Translate documentation into other languages</li> </ul>"},{"location":"community/#bug-reports-and-feature-requests","title":"Bug Reports and Feature Requests","text":"<ul> <li>Issue Tracker - Report bugs or request features</li> <li>Please check existing issues before creating a new one</li> </ul>"},{"location":"community/#community-projects","title":"Community Projects","text":"<p>Here are some projects created by our community members:</p>"},{"location":"community/#extensions-and-plugins","title":"Extensions and Plugins","text":"<ul> <li>TSG Jupyter Extension - Jupyter notebook integration</li> <li>TSG NLP Tools - Advanced NLP tools for TSG data</li> <li>TSG React Components - React components for TSG visualization</li> </ul>"},{"location":"community/#applications","title":"Applications","text":"<ul> <li>TSGChat - Chat interface for transcript analysis</li> <li>TSG Explorer - Desktop application for TSG data exploration</li> </ul>"},{"location":"community/#events","title":"Events","text":""},{"location":"community/#upcoming-events","title":"Upcoming Events","text":"Event Date Location Details TSG User Meetup May 15, 2025 Online Register TSG Workshop at NLP Conference June 3-5, 2025 San Francisco, CA Conference Website TSG Ecosystem Hackathon July 10-12, 2025 Berlin, Germany Details"},{"location":"community/#past-events","title":"Past Events","text":"<p>Recordings from our past events are available on our YouTube channel.</p>"},{"location":"community/#community-guidelines","title":"Community Guidelines","text":"<p>To ensure a welcoming and productive community, we follow these principles:</p> <ul> <li>Be respectful - Treat others with respect and kindness</li> <li>Be constructive - Focus on constructive feedback and solutions</li> <li>Be inclusive - Welcome newcomers and help them get started</li> <li>Share knowledge - Help others and share what you learn</li> </ul> <p>Our full Code of Conduct is available here.</p>"},{"location":"community/#support-the-project","title":"Support the Project","text":"<p>If you find TSG Ecosystem valuable, please consider supporting the project:</p> <ul> <li>GitHub Sponsors</li> <li>Open Collective</li> </ul> <p>Your support helps us maintain and improve the project for everyone!</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section provides detailed documentation for all the modules, classes, functions, and methods in the TSG Ecosystem.</p>"},{"location":"api-reference/#overview","title":"Overview","text":"<p>The TSG Ecosystem is organized into several main modules:</p> Module Description TSG Core Core data structures and operations for transcript segment graphs TSG Visualizer Visualization tools for rendering and exploring TSG data TSG Analytics Analytical tools and algorithms for TSG data processing TSG Converter Utilities for converting between TSG and other formats"},{"location":"api-reference/#module-installation","title":"Module Installation","text":"<p>Each module can be installed separately:</p> <pre><code># Install core functionality\npip install tsgeco-core\n\n# Install visualization module\npip install tsgeco-viz\n\n# Install analytics module\npip install tsgeco-analytics\n\n# Install converter utilities\npip install tsgeco-converter\n\n# Or install everything at once\npip install tsgeco[all]\n</code></pre>"},{"location":"api-reference/#import-structure","title":"Import Structure","text":"<p>The TSG Ecosystem uses a hierarchical import structure:</p> <pre><code># Core components\nfrom tsgeco import TSGraph, TSSegment, TSConnection\n\n# Submodules\nfrom tsgeco.visualizer import TSGVisualizer, TSGDashboard\nfrom tsgeco.analytics import basic_stats, semantic_analysis, topic_modeling\nfrom tsgeco.converter import import_from_srt, export_to_json\n</code></pre>"},{"location":"api-reference/#api-stability","title":"API Stability","text":"<p>Our API follows Semantic Versioning:</p> <ul> <li>Stable APIs: All public classes and functions documented in this reference are considered stable within a major version.</li> <li>Experimental APIs: Some newer features may be marked as experimental with a warning in their documentation.</li> <li>Internal APIs: Functions and classes with names starting with an underscore (<code>_</code>) are considered internal and may change without notice.</li> </ul>"},{"location":"api-reference/#version-compatibility","title":"Version Compatibility","text":"TSG Ecosystem Version Python Version Supported Until 1.x 3.8+ December 2026 2.x 3.9+ Current"},{"location":"api-reference/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started</li> <li>Basic Usage Examples</li> <li>Advanced Features</li> <li>Contribution Guidelines</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers all the ways to install and set up the TSG Ecosystem components.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>4GB RAM minimum (8GB recommended for larger datasets)</li> <li>Operating systems:</li> <li>Windows 10 or higher</li> <li>macOS 10.14 or higher</li> <li>Linux (most modern distributions)</li> </ul>"},{"location":"getting-started/installation/#standard-installation","title":"Standard Installation","text":"<p>The simplest way to install the TSG Ecosystem is through pip:</p> <pre><code>pip install tsgraph\n</code></pre> <p>This installs the core library with basic functionality.</p>"},{"location":"getting-started/installation/#component-specific-installation","title":"Component-specific Installation","text":"<p>You can install specific components of the ecosystem:</p> <pre><code># Core library only\npip install tsgeco-core\n\n# Visualization components\npip install tsgeco-viz\n\n# Analytics suite\npip install tsgeco-analytics\n\n# Converter utilities\npip install tsgeco-converter\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Install optional features using extras:</p> <pre><code># Install with visualization dependencies\npip install tsgeco[viz]\n\n# Install with analytics dependencies\npip install tsgeco[analytics]\n\n# Install with all optional dependencies\npip install tsgeco[all]\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For contributors who want to install the development version:</p> <pre><code>git clone https://github.com/TSGECO/tsgeco.git\ncd tsgeco\npip install -e \".[dev]\"\n</code></pre> <p>This installs the package in development mode with additional tools for testing and development.</p>"},{"location":"getting-started/installation/#gpu-support","title":"GPU Support","text":"<p>For enhanced performance with large datasets, we recommend installing with GPU support:</p> <pre><code>pip install tsgeco[gpu]\n</code></pre>"},{"location":"getting-started/installation/#cuda-requirements","title":"CUDA Requirements","text":"<p>If using the GPU-accelerated features: - CUDA 11.0 or higher - Compatible NVIDIA GPU with at least 4GB memory</p>"},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":"<p>We provide Docker images with all dependencies pre-installed:</p> <pre><code># Pull the latest image\ndocker pull tsgeco/tsgeco:latest\n\n# Or a specific version\ndocker pull tsgeco/tsgeco:1.0.0\n\n# Run a container\ndocker run -it --rm tsgeco/tsgeco\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation, you can verify that everything is working correctly:</p> <pre><code>python -c \"import tsgeco; print(tsgeco.__version__)\"\n</code></pre> <p>You should see the version number of the installed package.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#missing-dependencies","title":"Missing Dependencies","text":"<p>If you encounter errors about missing dependencies, try:</p> <pre><code>pip install --upgrade tsgeco[all]\n</code></pre>"},{"location":"getting-started/installation/#gpu-not-detected","title":"GPU Not Detected","text":"<p>If your GPU isn't being detected:</p> <ol> <li>Verify your CUDA installation: <code>nvcc --version</code></li> <li>Check that PyTorch can see your GPU:    <pre><code>import torch; print(torch.cuda.is_available())\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you continue to have installation problems, please:</p> <ol> <li>Check our GitHub issues</li> <li>Join our community forum</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with the TSG Ecosystem quickly.</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":""},{"location":"getting-started/quickstart/#install-from-pypi","title":"Install from PyPI","text":"<pre><code>pip install tsgeco\n</code></pre> <p>For specific components:</p> <pre><code># Install just the core library\npip install tsgeco-core\n\n# Install with visualization support\npip install tsgeco[viz]\n\n# Install with analytics support\npip install tsgeco[analytics]\n\n# Full installation with all dependencies\npip install tsgeco[all]\n</code></pre>"},{"location":"getting-started/quickstart/#basic-usage-example","title":"Basic Usage Example","text":"<p>Here's a simple example of working with the TSG format:</p> <pre><code>from tsgeco import TSGraph\n\n# Create a new TSG graph\ngraph = TSGraph()\n\n# Add transcript segments\ngraph.add_segment(\"segment1\", start_time=0.0, end_time=2.5, text=\"Hello, this is\")\ngraph.add_segment(\"segment2\", start_time=2.5, end_time=5.0, text=\"a demonstration of TSG.\")\n\n# Add connections between segments\ngraph.add_connection(\"segment1\", \"segment2\", connection_type=\"sequential\")\n\n# Save the graph\ngraph.save(\"my_transcript.tsg\")\n\n# Later, load the graph\nloaded_graph = TSGraph.load(\"my_transcript.tsg\")\n\n# Access segments and their connections\nsegments = loaded_graph.get_segments()\nfor segment_id, segment in segments.items():\n    print(f\"Segment {segment_id}: {segment.text} ({segment.start_time}-{segment.end_time}s)\")\n    connections = loaded_graph.get_connections(segment_id)\n    if connections:\n        print(f\"  Connected to: {', '.join(connections)}\")\n</code></pre>"},{"location":"getting-started/quickstart/#using-the-visualizer","title":"Using the Visualizer","text":"<p>To visualize your TSG data:</p> <pre><code>from tsgeco.visualizer import TSGVisualizer\n\n# Create a visualizer with your graph\nviz = TSGVisualizer(graph)\n\n# Generate an interactive HTML visualization\nviz.to_html(\"transcript_visualization.html\")\n\n# Or display directly in a Jupyter notebook\nviz.display()\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the TSG Core Library</li> <li>Explore advanced visualization options</li> <li>Check out our analytics tools</li> <li>View complete examples</li> </ul>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues:</p> <ul> <li>Check our GitHub issues</li> <li>Join our community forum</li> </ul>"},{"location":"user-guide/advanced-features/","title":"Advanced FeaturesAdvanced Features","text":"<p>Unlock the full potential of the TSG Ecosystem</p> <p>This guide explores advanced capabilities of the TSG Ecosystem for power users who need to perform complex operations with transcript data.</p>"},{"location":"user-guide/advanced-features/#advanced-graph-operations","title":"Advanced Graph Operations","text":""},{"location":"user-guide/advanced-features/#custom-connection-types","title":"Custom Connection Types","text":"<p>TSG allows you to define custom connection types between segments to model various relationships:</p> <pre><code># Define semantic connections with custom properties\ngraph.add_connection(\n    source=\"seg_012\",\n    target=\"seg_045\",\n    connection_type=\"semantic_similarity\",\n    weight=0.92,\n    properties={\n        \"similarity_metric\": \"cosine\",\n        \"embedding_model\": \"sentence-bert\",\n        \"topics\": [\"research\", \"methodology\", \"results\"]\n    }\n)\n</code></pre>"},{"location":"user-guide/advanced-features/#batch-operations","title":"Batch OperationsPerformance Optimization","text":"<p>For large datasets, use batch operations to efficiently process multiple segments or connections.</p> <pre><code># Batch add segments\nsegments_data = [\n    {\n        \"id\": \"seg_101\",\n        \"start_time\": 120.5,\n        \"end_time\": 125.2,\n        \"text\": \"Let's discuss the experimental setup.\",\n        \"speaker\": \"Dr. Smith\"\n    },\n    {\n        \"id\": \"seg_102\",\n        \"start_time\": 125.5,\n        \"end_time\": 134.8,\n        \"text\": \"We used a controlled environment with three variable conditions.\",\n        \"speaker\": \"Dr. Smith\"\n    },\n    # More segments...\n]\n\ngraph.add_segments_batch(segments_data)\n</code></pre>"},{"location":"user-guide/advanced-features/#graph-transformation","title":"Graph Transformation","text":"FilteringMergingSplitting <pre><code># Create a subgraph with only specific speakers\nfiltered_graph = graph.filter_by_property(\n    property_name=\"speaker\",\n    property_values=[\"Dr. Smith\", \"Dr. Johnson\"]\n)\n</code></pre> <pre><code># Merge two different transcript graphs\ncombined_graph = TSGraph.merge(\n    [interview_graph, presentation_graph],\n    strategy=\"sequential\"\n)\n</code></pre> <pre><code># Split a graph by time segments\nsegments = graph.split_by_time(\n    intervals=[300, 600, 900],  # Split at 5 min, 10 min, 15 min\n    overlap=10  # 10 second overlap between segments\n)\n</code></pre>"},{"location":"user-guide/advanced-features/#visualization-techniques","title":"Visualization Techniques","text":"<p>Integration with Visualizer</p> <p>The examples below require the <code>tsgeco.visualizer</code> module.</p>"},{"location":"user-guide/advanced-features/#interactive-network-visualization","title":"Interactive Network Visualization","text":"<pre><code>from tsgeco.visualizer import NetworkVisualizer\n\n# Create an interactive network visualization\nviz = NetworkVisualizer(graph)\nviz.set_node_coloring(attribute=\"speaker\")\nviz.set_edge_styling(attribute=\"connection_type\")\nviz.add_tooltips([\"text\", \"start_time\", \"end_time\"])\n\n# Generate and save interactive HTML visualization\nviz.render(\"transcript_network.html\")\n</code></pre>"},{"location":"user-guide/advanced-features/#timeline-visualization","title":"Timeline VisualizationSpeaker TimelineTopic Heatmap","text":"<p>Visualize speaker turns over time</p> <pre><code>from tsgeco.visualizer import TimelineVisualizer\n\ntimeline = TimelineVisualizer(graph)\ntimeline.render_speaker_timeline(\"speaker_timeline.html\")</code></pre> <p>Visualize topic intensity over time</p> <pre><code>from tsgeco.visualizer import TopicHeatmapVisualizer\n\nheatmap = TopicHeatmapVisualizer(graph)\nheatmap.extract_topics(method=\"lda\", num_topics=5)\nheatmap.render(\"topic_heatmap.html\")</code></pre>"},{"location":"user-guide/advanced-features/#advanced-analytics","title":"Advanced Analytics","text":""},{"location":"user-guide/advanced-features/#topic-modeling","title":"Topic Modeling","text":"<pre><code>from tsgeco.analytics import TopicModeler\n\n# Extract topics from transcript segments\nmodeler = TopicModeler(graph)\ntopics = modeler.extract_topics(\n    method=\"lda\",\n    num_topics=8,\n    remove_stopwords=True,\n    min_segment_length=10\n)\n\n# Apply topics to segments\nmodeler.apply_topics_to_segments()\n\n# Find segments discussing a specific topic\nai_segments = graph.get_segments_by_property(\n    property_name=\"topics\",\n    property_value_contains=\"artificial intelligence\"\n)\n</code></pre>"},{"location":"user-guide/advanced-features/#sentiment-analysis","title":"Sentiment Analysis","text":"<p>Tracking Sentiment</p> <pre><code>from tsgeco.analytics import SentimentAnalyzer\n\nanalyzer = SentimentAnalyzer(graph)\nanalyzer.analyze()\n\n# Get sentiment scores for each segment\nscores = analyzer.get_sentiment_scores()\n\n# Plot sentiment over time\nanalyzer.plot_sentiment_timeline(\"sentiment_timeline.png\")\n\n# Find segments with negative sentiment\nnegative_segments = analyzer.get_segments_by_sentiment(\n    threshold=0.3,\n    sentiment_type=\"negative\"\n)\n</code></pre>"},{"location":"user-guide/advanced-features/#speaker-diarization-refinement","title":"Speaker Diarization Refinement","text":"<pre><code>from tsgeco.analytics import SpeakerDiarization\n\n# Refine speaker labels\ndiarizer = SpeakerDiarization(graph)\ndiarizer.load_voice_embeddings(\"speaker_embeddings.pkl\")\ndiarizer.refine_speaker_labels(method=\"clustering\")\n\n# Get segments with corrected speaker labels\nrefined_graph = diarizer.get_refined_graph()\n</code></pre>"},{"location":"user-guide/advanced-features/#advanced-integration-options","title":"Advanced Integration Options","text":""},{"location":"user-guide/advanced-features/#real-time-processing","title":"Real-time ProcessingStreaming API","text":"<p>Process transcripts in real-time as they are generated</p> <pre><code>from tsgeco.streaming import TSGStreamProcessor\n\n# Set up a real-time processor\nprocessor = TSGStreamProcessor()\n\n# Define callback function for new segments\ndef on_new_segment(segment):\n    print(f\"New segment: {segment['text']}\")\n    # Process segment in real-time...\n\n# Start processing from streaming source\nprocessor.connect_to_stream(\n    source=\"websocket\",\n    url=\"wss://transcript-stream.example.com/ws\",\n    on_segment=on_new_segment\n)\n</code></pre>"},{"location":"user-guide/advanced-features/#custom-plugins","title":"Custom Plugins","text":"<pre><code>from tsgeco.plugins import TSGPlugin\n\nclass CustomAnalyzer(TSGPlugin):\n    def __init__(self, name=\"custom_analyzer\"):\n        super().__init__(name)\n\n    def process(self, graph):\n        # Custom analysis logic here\n        return modified_graph\n\n    # Register custom commands\n    def get_commands(self):\n        return {\n            \"analyze_patterns\": self.analyze_patterns,\n            \"extract_entities\": self.extract_entities\n        }\n\n# Register and use the plugin\nplugin = CustomAnalyzer()\ngraph.register_plugin(plugin)\nresults = graph.run_plugin_command(\"custom_analyzer\", \"analyze_patterns\")\n</code></pre>"},{"location":"user-guide/advanced-features/#performance-optimization","title":"Performance Optimization","text":"<p>Large Dataset Considerations</p> <p>These techniques are essential when working with very large transcript datasets.</p> Chunked Processing <p>Process large graphs in manageable chunks</p> <pre><code>from tsgeco import GraphChunker\n\nchunker = GraphChunker(graph)\nchunks = chunker.split(chunk_size=1000)  # segments per chunk\n\nfor chunk in chunks:\n    process_chunk(chunk)  # Custom processing</code></pre> Parallel Processing <p>Distribute graph operations across multiple cores</p> <pre><code>from tsgeco.parallel import ParallelProcessor\n\nprocessor = ParallelProcessor(max_workers=8)\nresults = processor.process_graph(\n    graph,\n    operation=my_custom_operation,\n    merge_strategy=\"concat\"\n)</code></pre>"},{"location":"user-guide/advanced-features/#next-steps","title":"Next Steps","text":"<p>Now that you're familiar with the advanced features of the TSG Ecosystem, you might want to:</p> <ul> <li>Explore our API Reference for detailed documentation</li> <li>Join our Community to share your use cases and contribute to the project</li> </ul>"},{"location":"user-guide/basic-usage/","title":"Basic UsageBasic Usage","text":"<p>Getting started with the TSG Ecosystem</p> <p>This guide covers the fundamental operations and concepts when working with the TSG Ecosystem.</p>"},{"location":"user-guide/basic-usage/#core-concepts","title":"Core Concepts","text":"<p>Before diving into code examples, let's understand the key concepts:</p>"},{"location":"user-guide/basic-usage/#transcript-segment-graph-tsg","title":"Transcript Segment Graph (TSG)","text":"<p>What is a TSG?</p> <p>A TSG consists of:</p> <ul> <li>Segments: Individual pieces of transcript text with properties like start/end times and speaker information</li> <li>Connections: Relationships between segments (sequential, overlapping, semantic, etc.)</li> <li>Metadata: Additional information about the transcript or individual segments</li> </ul>"},{"location":"user-guide/basic-usage/#working-with-tsg-graphs","title":"Working with TSG Graphs","text":""},{"location":"user-guide/basic-usage/#creating-a-new-graph","title":"Creating a New Graph","text":"<pre><code>from tsgeco import TSGraph\n\n# Initialize an empty graph\ngraph = TSGraph(name=\"Interview Transcript\")\n\n# Add metadata to the graph\ngraph.add_metadata(\n    title=\"Interview with Dr. Smith\",\n    date=\"2025-04-10\",\n    duration=\"45:23\",\n    speakers=[\"Interviewer\", \"Dr. Smith\"]\n)\n</code></pre>"},{"location":"user-guide/basic-usage/#adding-segments","title":"Adding SegmentsSegments","text":"<p>Segments represent individual pieces of transcript text with timing and speaker information.</p> <pre><code># Add segments with speaker information\ngraph.add_segment(\n    id=\"seg_001\",\n    start_time=0.0,\n    end_time=4.2,\n    text=\"Welcome to our interview series. Today we have Dr. Smith with us.\",\n    speaker=\"Interviewer\"\n)\n\ngraph.add_segment(\n    id=\"seg_002\",\n    start_time=4.5,\n    end_time=10.3,\n    text=\"Thank you for having me. I'm excited to discuss our recent research findings.\",\n    speaker=\"Dr. Smith\"\n)\n</code></pre>"},{"location":"user-guide/basic-usage/#creating-connections","title":"Creating ConnectionsConnections","text":"<p>Connections establish relationships between segments in your graph.</p> <pre><code># Sequential connection (timeline order)\ngraph.add_connection(\"seg_001\", \"seg_002\", connection_type=\"sequential\")\n\n# Semantic connection (related content)\ngraph.add_connection(\"seg_005\", \"seg_023\",\n    connection_type=\"semantic\",\n    weight=0.85,\n    properties={\"topic\": \"research_methodology\"}\n)\n</code></pre>"},{"location":"user-guide/basic-usage/#querying-the-graph","title":"Querying the Graph","text":"By SpeakerBy Time RangeBy Connection Type <pre><code># Get all segments from a specific speaker\ndr_smith_segments = graph.get_segments_by_property(speaker=\"Dr. Smith\")\n</code></pre> <pre><code># Find segments within a time range\nintro_segments = graph.get_segments_by_time(start=0.0, end=60.0)\n</code></pre> <pre><code># Get all connections of a specific type\nsemantic_connections = graph.get_connections_by_type(\"semantic\")\n</code></pre>"},{"location":"user-guide/basic-usage/#working-with-tsg-files","title":"Working with TSG Files","text":""},{"location":"user-guide/basic-usage/#saving-and-loading","title":"Saving and LoadingSave to TSGLoad from TSG","text":"<p>Save your graph to a portable TSG format file.</p> <pre><code>graph.save(\"interview_transcript.tsg\")</code></pre> <p>Load a previously saved TSG file.</p> <pre><code>loaded_graph = TSGraph.load(\"interview_transcript.tsg\")</code></pre>"},{"location":"user-guide/basic-usage/#importing-from-other-formats","title":"Importing from Other Formats","text":"<pre><code>from tsgeco.converter import import_from_srt, import_from_vtt\n\n# Import from subtitle formats\ngraph_from_srt = import_from_srt(\"subtitles.srt\")\ngraph_from_vtt = import_from_vtt(\"subtitles.vtt\")\n</code></pre>"},{"location":"user-guide/basic-usage/#exporting-to-other-formats","title":"Exporting to Other Formats","text":"<pre><code>from tsgeco.converter import export_to_json, export_to_csv\n\n# Export to common formats\nexport_to_json(graph, \"transcript_data.json\")\nexport_to_csv(graph, \"transcript_segments.csv\", \"transcript_connections.csv\")\n</code></pre>"},{"location":"user-guide/basic-usage/#basic-analysis","title":"Basic Analysis","text":"<p>Example: Basic Statistics</p> <pre><code>from tsgeco.analytics import basic_stats, speaker_analysis\n\n# Get basic statistics about the graph\nstats = basic_stats(graph)\nprint(f\"Total segments: {stats['segment_count']}\")\nprint(f\"Average segment duration: {stats['avg_segment_duration']:.2f}s\")\n\n# Analyze speaker patterns\nspeaker_stats = speaker_analysis(graph)\nfor speaker, data in speaker_stats.items():\n    print(f\"{speaker}: {data['total_speaking_time']:.2f}s, {data['segment_count']} segments\")\n</code></pre>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"Advanced Features <p>Ready to take your TSG usage to the next level?</p> Learn about advanced features"}]}